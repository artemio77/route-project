version: '2.2'
services:
  redis:
    image: 'redis:6.2.6-alpine'
    container_name: redis
    mem_limit: 256mb
    cpus: 0.5
    ports:
      - "6379:6379"
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    mem_limit: 256mb
    cpus: 1
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc -w 2 zookeeper 2181" ]
      interval: 5s
      timeout: 10s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_HEAP_OPTS: -Xmx128m
  zkui:
    image: juris/zkui
    build:
      context: zkui
    mem_limit: 256mb
    cpus: 0.5
    depends_on:
      - zookeeper
    ports:
      - "9090:9090"
    environment:
      ZK_SERVER: zookeeper:2181


  kafka-node-1:
    image: confluentinc/cp-kafka:latest
    mem_limit: 1024mb
    cpus: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-node-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "rt.route.saga.commands:6:1:compact,rt.create.route.saga.commands-reply:6:1:compact"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-node-1 -Dcom.sun.management.jmxremote.rmi.port=9997"
      JMX_PORT: 9997
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-create-topics:
    image: confluentinc/cp-kafka:latest

    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: |
      bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka-node-1:29092 1 20 && \
      kafka-topics --create --topic rt.route.saga.commands --partitions 6 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
      kafka-topics --create --topic rt.route.saga.commands.reply --partitions 6 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
      kafka-topics --create --topic rt.create.route.saga.commands --partitions 6 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
      kafka-topics --create --topic rt.create.route.saga.commands-reply --partitions 6 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181'
    environment:
      # The followi0ng settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9000:8080"
    mem_limit: 256mb
    cpus: 0.5
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-node-1:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997

  postgres:
    image: eventuateio/eventuate-postgres:0.15.0.BUILD-SNAPSHOT
    mem_limit: 256mb
    cpus: 0.5
    ports:
      - "5432:5432"
    volumes:
      - /private/var/lib/postgresql:/var/lib/postgresql
    environment:
      POSTGRES_USER: eventuate
      POSTGRES_PASSWORD: eventuate
      USE_DB_ID: "false"
      USE_JSON_PAYLOAD_AND_HEADERS: "true"

  cdc-service:
    image: eventuateio/eventuate-cdc-service:latest
    mem_limit: 256mb
    cpus: 0.5
    ports:
      - "8099:8080"
#    depends_on:
#      kafka-node-1:
#        condition: service_healthy
#      zookeeper:
#        condition: service_healthy
#      postgres:
#        condition: service_healthy
    environment:
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka-node-1:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181

      EVENTUATE_CDC_PIPELINE_PIPELINE1_TYPE: eventuate-local
      EVENTUATE_CDC_PIPELINE_PIPELINE1_READER: reader1

      EVENTUATE_CDC_PIPELINE_PIPELINE2_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_PIPELINE2_READER: reader1

      EVENTUATE_CDC_READER_READER1_TYPE: postgres-wal
      eventuate.cdc.reader.reader1.outboxId: 1
      EVENTUATE_CDC_READER_READER1_DATASOURCEURL: jdbc:postgresql://postgres/eventuate
      EVENTUATE_CDC_READER_READER1_DATASOURCEUSERNAME: eventuate
      EVENTUATE_CDC_READER_READER1_DATASOURCEPASSWORD: eventuate
      EVENTUATE_CDC_READER_READER1_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_READER1_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/eventuatelocal
      EVENTUATE_CDC_READER_READER1_OFFSETSTORAGETOPICNAME: db.history.eventuate.local

  couchbase:
    image: couchbase/server
    volumes:
      - ~/couchbase/node1:/opt/couchbase/var
    # define our application ports
    ports:
      - "8091:8091"
      - "8092:8092"
      - "8093:8093"
      - "11210:11210"
